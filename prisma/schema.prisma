// This is your Prisma schema file
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  password      String
  notes         Note[]
  userConfig    UserConfig?
  conversations Conversation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Note {
  id         String   @id @default(cuid())
  title      String
  content    String
  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  isFavorite Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserConfig {
  id                Int     @id @default(autoincrement())
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [id])
  theme             String? // 主题配置
  language          String? // 语言设置
  settings          String? @default("{}") // 使用 JSON 存储所有模块化配置
  provider_settings String  @default("{}") // 使用 JSON 存储所有模型配置
}

model ProviderInfo {
  id             String   @id @default(cuid())
  name           String
  default        Boolean  @default(false)
  description    String
  dynamic_params String // 连接参数
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id             String       @id @default(cuid())
  parentId       String? // 父消息 ID，可为空
  parent         Message?     @relation("MessageToMessage", fields: [parentId], references: [id])
  children       Message[]    @relation("MessageToMessage")
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  content        String
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  attachments    Attachment[]
}

model Attachment {
  id        String   @id @default(cuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
